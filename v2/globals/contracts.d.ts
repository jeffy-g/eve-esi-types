// Generated by scripts/lib/code-synthesizer.mjs

// - - - - - - - - - - - - - - - - - - - -
//            @method {get}
// - - - - - - - - - - - - - - - - - - - -
/*!
 * ESI endpoint: get:/characters/{character_id}/contracts/
 */
/**
 * To whom the contract is available
 */
type GetCharactersCharacterIdContractsAvailability = "public" | "personal" | "corporation" | "alliance";
/**
 * Status of the the contract
 */
type GetCharactersCharacterIdContractsStatus =
  | "outstanding"
  | "in_progress"
  | "finished_issuer"
  | "finished_contractor"
  | "finished"
  | "cancelled"
  | "rejected"
  | "failed"
  | "deleted"
  | "reversed";
/**
 * Type of the contract
 */
type GetCharactersCharacterIdContractsType = "unknown" | "item_exchange" | "auction" | "courier" | "loan";
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCharactersCharacterIdContractsOk = GetCharactersCharacterIdContracts_200Ok[];

/**
 * 200 ok object
 */
interface GetCharactersCharacterIdContracts_200Ok {
  /**
   * Who will accept the contract
   */
  acceptor_id: number;
  /**
   * ID to whom the contract is assigned, can be alliance, corporation or character ID
   */
  assignee_id: number;
  availability: GetCharactersCharacterIdContractsAvailability;
  /**
   * Buyout price (for Auctions only)
   */
  buyout?: number;
  /**
   * Collateral price (for Couriers only)
   */
  collateral?: number;
  /**
   * contract_id integer
   */
  contract_id: number;
  /**
   * Date of confirmation of contract
   */
  date_accepted?: string;
  /**
   * Date of completed of contract
   */
  date_completed?: string;
  /**
   * Expiration date of the contract
   */
  date_expired: string;
  /**
   * Сreation date of the contract
   */
  date_issued: string;
  /**
   * Number of days to perform the contract
   */
  days_to_complete?: number;
  /**
   * End location ID (for Couriers contract)
   */
  end_location_id?: number;
  /**
   * true if the contract was issued on behalf of the issuer's corporation
   */
  for_corporation: boolean;
  /**
   * Character's corporation ID for the issuer
   */
  issuer_corporation_id: number;
  /**
   * Character ID for the issuer
   */
  issuer_id: number;
  /**
   * Price of contract (for ItemsExchange and Auctions)
   */
  price?: number;
  /**
   * Remuneration for contract (for Couriers only)
   */
  reward?: number;
  /**
   * Start location ID (for Couriers contract)
   */
  start_location_id?: number;
  status: GetCharactersCharacterIdContractsStatus;
  /**
   * Title of the contract
   */
  title?: string;
  type: GetCharactersCharacterIdContractsType;
  /**
   * Volume of items in the contract
   */
  volume?: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/characters/{character_id}/contracts/{contract_id}/bids/
 */
/**
 * 200 ok array
 *
 * @maxItems 5000
 */
type GetCharactersCharacterIdContractsContractIdBidsOk = GetCharactersCharacterIdContractsContractIdBids_200Ok[];

/**
 * 200 ok object
 */
interface GetCharactersCharacterIdContractsContractIdBids_200Ok {
  /**
   * The amount bid, in ISK
   */
  amount: number;
  /**
   * Unique ID for the bid
   */
  bid_id: number;
  /**
   * Character ID of the bidder
   */
  bidder_id: number;
  /**
   * Datetime when the bid was placed
   */
  date_bid: string;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/characters/{character_id}/contracts/{contract_id}/items/
 */
/**
 * 200 ok array
 *
 * @maxItems 5000
 */
type GetCharactersCharacterIdContractsContractIdItemsOk =
  GetCharactersCharacterIdContractsContractIdItems_200Ok[];

/**
 * 200 ok object
 */
interface GetCharactersCharacterIdContractsContractIdItems_200Ok {
  /**
   * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
   */
  is_included: boolean;
  /**
   * is_singleton boolean
   */
  is_singleton: boolean;
  /**
   * Number of items in the stack
   */
  quantity: number;
  /**
   * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
   */
  raw_quantity?: number;
  /**
   * Unique ID for the item
   */
  record_id: number;
  type_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/contracts/public/bids/{contract_id}/
 */
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetContractsPublicBidsContractIdOk = GetContractsPublicBidsContractId_200Ok[];

/**
 * 200 ok object
 */
interface GetContractsPublicBidsContractId_200Ok {
  /**
   * The amount bid, in ISK
   */
  amount: number;
  /**
   * Unique ID for the bid
   */
  bid_id: number;
  /**
   * Datetime when the bid was placed
   */
  date_bid: string;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/contracts/public/items/{contract_id}/
 */
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetContractsPublicItemsContractIdOk = GetContractsPublicItemsContractId_200Ok[];

/**
 * 200 ok object
 */
interface GetContractsPublicItemsContractId_200Ok {
  /**
   * is_blueprint_copy boolean
   */
  is_blueprint_copy?: boolean;
  /**
   * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
   */
  is_included: boolean;
  /**
   * Unique ID for the item being sold. Not present if item is being requested by contract rather than sold with contract
   */
  item_id?: number;
  /**
   * Material Efficiency Level of the blueprint
   */
  material_efficiency?: number;
  /**
   * Number of items in the stack
   */
  quantity: number;
  /**
   * Unique ID for the item, used by the contract system
   */
  record_id: number;
  /**
   * Number of runs remaining if the blueprint is a copy, -1 if it is an original
   */
  runs?: number;
  /**
   * Time Efficiency Level of the blueprint
   */
  time_efficiency?: number;
  type_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/contracts/public/{region_id}/
 */
/**
 * Type of the contract
 */
type GetContractsPublicRegionIdType = "unknown" | "item_exchange" | "auction" | "courier" | "loan";
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetContractsPublicRegionIdOk = GetContractsPublicRegionId_200Ok[];

/**
 * 200 ok object
 */
interface GetContractsPublicRegionId_200Ok {
  /**
   * Buyout price (for Auctions only)
   */
  buyout?: number;
  /**
   * Collateral price (for Couriers only)
   */
  collateral?: number;
  /**
   * contract_id integer
   */
  contract_id: number;
  /**
   * Expiration date of the contract
   */
  date_expired: string;
  /**
   * Сreation date of the contract
   */
  date_issued: string;
  /**
   * Number of days to perform the contract
   */
  days_to_complete?: number;
  /**
   * End location ID (for Couriers contract)
   */
  end_location_id?: number;
  /**
   * true if the contract was issued on behalf of the issuer's corporation
   */
  for_corporation?: boolean;
  /**
   * Character's corporation ID for the issuer
   */
  issuer_corporation_id: number;
  /**
   * Character ID for the issuer
   */
  issuer_id: number;
  /**
   * Price of contract (for ItemsExchange and Auctions)
   */
  price?: number;
  /**
   * Remuneration for contract (for Couriers only)
   */
  reward?: number;
  /**
   * Start location ID (for Couriers contract)
   */
  start_location_id?: number;
  /**
   * Title of the contract
   */
  title?: string;
  type: GetContractsPublicRegionIdType;
  /**
   * Volume of items in the contract
   */
  volume?: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporations/{corporation_id}/contracts/
 */
/**
 * To whom the contract is available
 */
type GetCorporationsCorporationIdContractsAvailability = "public" | "personal" | "corporation" | "alliance";
/**
 * Status of the the contract
 */
type GetCorporationsCorporationIdContractsStatus =
  | "outstanding"
  | "in_progress"
  | "finished_issuer"
  | "finished_contractor"
  | "finished"
  | "cancelled"
  | "rejected"
  | "failed"
  | "deleted"
  | "reversed";
/**
 * Type of the contract
 */
type GetCorporationsCorporationIdContractsType = "unknown" | "item_exchange" | "auction" | "courier" | "loan";
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCorporationsCorporationIdContractsOk = GetCorporationsCorporationIdContracts_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationsCorporationIdContracts_200Ok {
  /**
   * Who will accept the contract
   */
  acceptor_id: number;
  /**
   * ID to whom the contract is assigned, can be corporation or character ID
   */
  assignee_id: number;
  availability: GetCorporationsCorporationIdContractsAvailability;
  /**
   * Buyout price (for Auctions only)
   */
  buyout?: number;
  /**
   * Collateral price (for Couriers only)
   */
  collateral?: number;
  /**
   * contract_id integer
   */
  contract_id: number;
  /**
   * Date of confirmation of contract
   */
  date_accepted?: string;
  /**
   * Date of completed of contract
   */
  date_completed?: string;
  /**
   * Expiration date of the contract
   */
  date_expired: string;
  /**
   * Сreation date of the contract
   */
  date_issued: string;
  /**
   * Number of days to perform the contract
   */
  days_to_complete?: number;
  /**
   * End location ID (for Couriers contract)
   */
  end_location_id?: number;
  /**
   * true if the contract was issued on behalf of the issuer's corporation
   */
  for_corporation: boolean;
  /**
   * Character's corporation ID for the issuer
   */
  issuer_corporation_id: number;
  /**
   * Character ID for the issuer
   */
  issuer_id: number;
  /**
   * Price of contract (for ItemsExchange and Auctions)
   */
  price?: number;
  /**
   * Remuneration for contract (for Couriers only)
   */
  reward?: number;
  /**
   * Start location ID (for Couriers contract)
   */
  start_location_id?: number;
  status: GetCorporationsCorporationIdContractsStatus;
  /**
   * Title of the contract
   */
  title?: string;
  type: GetCorporationsCorporationIdContractsType;
  /**
   * Volume of items in the contract
   */
  volume?: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporations/{corporation_id}/contracts/{contract_id}/bids/
 */
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCorporationsCorporationIdContractsContractIdBidsOk =
  GetCorporationsCorporationIdContractsContractIdBids_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationsCorporationIdContractsContractIdBids_200Ok {
  /**
   * The amount bid, in ISK
   */
  amount: number;
  /**
   * Unique ID for the bid
   */
  bid_id: number;
  /**
   * Character ID of the bidder
   */
  bidder_id: number;
  /**
   * Datetime when the bid was placed
   */
  date_bid: string;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporations/{corporation_id}/contracts/{contract_id}/items/
 */
/**
 * 200 ok array
 *
 * @maxItems 5000
 */
type GetCorporationsCorporationIdContractsContractIdItemsOk =
  GetCorporationsCorporationIdContractsContractIdItems_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationsCorporationIdContractsContractIdItems_200Ok {
  /**
   * true if the contract issuer has submitted this item with the contract, false if the isser is asking for this item in the contract
   */
  is_included: boolean;
  /**
   * is_singleton boolean
   */
  is_singleton: boolean;
  /**
   * Number of items in the stack
   */
  quantity: number;
  /**
   * -1 indicates that the item is a singleton (non-stackable). If the item happens to be a Blueprint, -1 is an Original and -2 is a Blueprint Copy
   */
  raw_quantity?: number;
  /**
   * Unique ID for the item
   */
  record_id: number;
  type_id: number;
  [k: string]: unknown | undefined;
}
