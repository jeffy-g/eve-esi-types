// Generated by scripts/lib/code-synthesizer.mjs

// - - - - - - - - - - - - - - - - - - - -
//            @method {get}
// - - - - - - - - - - - - - - - - - - - -
/*!
 * ESI endpoint: get:/sovereignty/campaigns/
 */
/**
 * Type of event this campaign is for. tcu_defense, ihub_defense and station_defense are referred to as "Defense Events", station_freeport as "Freeport Events".
 *
 */
type GetSovereigntyCampaignsEventType = "tcu_defense" | "ihub_defense" | "station_defense" | "station_freeport";
/**
 * Alliance participating and their respective scores, only present in Freeport Events.
 *
 *
 * @maxItems 5000
 */
type GetSovereigntyCampaignsParticipants = GetSovereigntyCampaignsParticipant[];
/**
 * 200 ok array
 *
 * @maxItems 10000
 */
type GetSovereigntyCampaignsOk = GetSovereigntyCampaigns_200Ok[];

/**
 * 200 ok object
 */
interface GetSovereigntyCampaigns_200Ok {
  /**
   * Score for all attacking parties, only present in Defense Events.
   *
   */
  attackers_score?: number;
  /**
   * Unique ID for this campaign.
   */
  campaign_id: number;
  /**
   * The constellation in which the campaign will take place.
   *
   */
  constellation_id: number;
  /**
   * Defending alliance, only present in Defense Events
   *
   */
  defender_id?: number;
  /**
   * Score for the defending alliance, only present in Defense Events.
   *
   */
  defender_score?: number;
  event_type: GetSovereigntyCampaignsEventType;
  participants?: GetSovereigntyCampaignsParticipants;
  /**
   * The solar system the structure is located in.
   *
   */
  solar_system_id: number;
  /**
   * Time the event is scheduled to start.
   *
   */
  start_time: string;
  /**
   * The structure item ID that is related to this campaign.
   *
   */
  structure_id: number;
  [k: string]: unknown | undefined;
}
/**
 * participant object
 */
interface GetSovereigntyCampaignsParticipant {
  /**
   * alliance_id integer
   */
  alliance_id: number;
  /**
   * score number
   */
  score: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/sovereignty/map/
 */
/**
 * 200 ok array
 *
 * @maxItems 10000
 */
type GetSovereigntyMapOk = GetSovereigntyMap_200Ok[];

/**
 * 200 ok object
 */
interface GetSovereigntyMap_200Ok {
  /**
   * alliance_id integer
   */
  alliance_id?: number;
  /**
   * corporation_id integer
   */
  corporation_id?: number;
  /**
   * faction_id integer
   */
  faction_id?: number;
  /**
   * system_id integer
   */
  system_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/sovereignty/structures/
 */
/**
 * 200 ok array
 *
 * @maxItems 10000
 */
type GetSovereigntyStructuresOk = GetSovereigntyStructures_200Ok[];

/**
 * 200 ok object
 */
interface GetSovereigntyStructures_200Ok {
  /**
   * The alliance that owns the structure.
   *
   */
  alliance_id: number;
  /**
   * Solar system in which the structure is located.
   *
   */
  solar_system_id: number;
  /**
   * Unique item ID for this structure.
   */
  structure_id: number;
  structure_type_id: number;
  /**
   * The occupancy level for the next or current vulnerability window. This takes into account all development indexes and capital system bonuses. Also known as Activity Defense Multiplier from in the client. It increases the time that attackers must spend using their entosis links on the structure.
   *
   */
  vulnerability_occupancy_level?: number;
  /**
   * The time at which the next or current vulnerability window ends. At the end of a vulnerability window the next window is recalculated and locked in along with the vulnerabilityOccupancyLevel. If the structure is not in 100% entosis control of the defender, it will go in to 'overtime' and stay vulnerable for as long as that situation persists. Only once the defenders have 100% entosis control and has the vulnerableEndTime passed does the vulnerability interval expire and a new one is calculated.
   *
   */
  vulnerable_end_time?: string;
  /**
   * The next time at which the structure will become vulnerable. Or the start time of the current window if current time is between this and vulnerableEndTime.
   *
   */
  vulnerable_start_time?: string;
  [k: string]: unknown | undefined;
}
