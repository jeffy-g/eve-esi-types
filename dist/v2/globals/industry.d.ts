// Generated by scripts/lib/code-synthesizer.mjs

// - - - - - - - - - - - - - - - - - - - -
//            @method {get}
// - - - - - - - - - - - - - - - - - - - -
/*!
 * ESI endpoint: get:/characters/{character_id}/industry/jobs/
 */
/**
 * status string
 */
type GetCharactersCharacterIdIndustryJobsStatus =
  | "active"
  | "cancelled"
  | "delivered"
  | "paused"
  | "ready"
  | "reverted";
/**
 * 200 ok array
 *
 * @maxItems 2000
 */
type GetCharactersCharacterIdIndustryJobsOk = GetCharactersCharacterIdIndustryJobs_200Ok[];

/**
 * 200 ok object
 */
interface GetCharactersCharacterIdIndustryJobs_200Ok {
  /**
   * Job activity ID
   */
  activity_id: number;
  /**
   * blueprint_id integer
   */
  blueprint_id: number;
  /**
   * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
   */
  blueprint_location_id: number;
  blueprint_type_id: number;
  /**
   * ID of the character which completed this job
   */
  completed_character_id?: number;
  /**
   * Date and time when this job was completed
   */
  completed_date?: string;
  /**
   * The sume of job installation fee and industry facility tax
   */
  cost?: number;
  /**
   * Job duration in seconds
   */
  duration: number;
  /**
   * Date and time when this job finished
   */
  end_date: string;
  /**
   * ID of the facility where this job is running
   */
  facility_id: number;
  /**
   * ID of the character which installed this job
   */
  installer_id: number;
  /**
   * Unique job ID
   */
  job_id: number;
  /**
   * Number of runs blueprint is licensed for
   */
  licensed_runs?: number;
  /**
   * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
   */
  output_location_id: number;
  /**
   * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
   */
  pause_date?: string;
  /**
   * Chance of success for invention
   */
  probability?: number;
  product_type_id?: number;
  /**
   * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
   */
  runs: number;
  /**
   * Date and time when this job started
   */
  start_date: string;
  /**
   * ID of the station where industry facility is located
   */
  station_id: number;
  status: GetCharactersCharacterIdIndustryJobsStatus;
  /**
   * Number of successful runs for this job. Equal to runs unless this is an invention job
   */
  successful_runs?: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/characters/{character_id}/mining/
 */
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCharactersCharacterIdMiningOk = GetCharactersCharacterIdMining_200Ok[];

/**
 * 200 ok object
 */
interface GetCharactersCharacterIdMining_200Ok {
  /**
   * date string
   */
  date: string;
  /**
   * quantity integer
   */
  quantity: number;
  /**
   * solar_system_id integer
   */
  solar_system_id: number;
  type_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporation/{corporation_id}/mining/extractions/
 */
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCorporationCorporationIdMiningExtractionsOk = GetCorporationCorporationIdMiningExtractions_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationCorporationIdMiningExtractions_200Ok {
  /**
   * The time at which the chunk being extracted will arrive and can be fractured by the moon mining drill.
   *
   */
  chunk_arrival_time: string;
  /**
   * The time at which the current extraction was initiated.
   *
   */
  extraction_start_time: string;
  /**
   * moon_id integer
   */
  moon_id: number;
  /**
   * The time at which the chunk being extracted will naturally fracture if it is not first fractured by the moon mining drill.
   *
   */
  natural_decay_time: string;
  /**
   * structure_id integer
   */
  structure_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporation/{corporation_id}/mining/observers/
 */
/**
 * The category of the observing entity
 */
type GetCorporationCorporationIdMiningObserversObserverType = "structure";
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCorporationCorporationIdMiningObserversOk = GetCorporationCorporationIdMiningObservers_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationCorporationIdMiningObservers_200Ok {
  /**
   * last_updated string
   */
  last_updated: string;
  /**
   * The entity that was observing the asteroid field when it was mined.
   *
   */
  observer_id: number;
  observer_type: GetCorporationCorporationIdMiningObserversObserverType;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporation/{corporation_id}/mining/observers/{observer_id}/
 */
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCorporationCorporationIdMiningObserversObserverIdOk =
  GetCorporationCorporationIdMiningObserversObserverId_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationCorporationIdMiningObserversObserverId_200Ok {
  /**
   * The character that did the mining
   *
   */
  character_id: number;
  /**
   * last_updated string
   */
  last_updated: string;
  /**
   * quantity integer
   */
  quantity: number;
  /**
   * The corporation id of the character at the time data was recorded.
   *
   */
  recorded_corporation_id: number;
  type_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/corporations/{corporation_id}/industry/jobs/
 */
/**
 * status string
 */
type GetCorporationsCorporationIdIndustryJobsStatus =
  | "active"
  | "cancelled"
  | "delivered"
  | "paused"
  | "ready"
  | "reverted";
/**
 * 200 ok array
 *
 * @maxItems 1000
 */
type GetCorporationsCorporationIdIndustryJobsOk = GetCorporationsCorporationIdIndustryJobs_200Ok[];

/**
 * 200 ok object
 */
interface GetCorporationsCorporationIdIndustryJobs_200Ok {
  /**
   * Job activity ID
   */
  activity_id: number;
  /**
   * blueprint_id integer
   */
  blueprint_id: number;
  /**
   * Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
   */
  blueprint_location_id: number;
  blueprint_type_id: number;
  /**
   * ID of the character which completed this job
   */
  completed_character_id?: number;
  /**
   * Date and time when this job was completed
   */
  completed_date?: string;
  /**
   * The sume of job installation fee and industry facility tax
   */
  cost?: number;
  /**
   * Job duration in seconds
   */
  duration: number;
  /**
   * Date and time when this job finished
   */
  end_date: string;
  /**
   * ID of the facility where this job is running
   */
  facility_id: number;
  /**
   * ID of the character which installed this job
   */
  installer_id: number;
  /**
   * Unique job ID
   */
  job_id: number;
  /**
   * Number of runs blueprint is licensed for
   */
  licensed_runs?: number;
  /**
   * ID of the location for the industry facility
   */
  location_id: number;
  /**
   * Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
   */
  output_location_id: number;
  /**
   * Date and time when this job was paused (i.e. time when the facility where this job was installed went offline)
   */
  pause_date?: string;
  /**
   * Chance of success for invention
   */
  probability?: number;
  product_type_id?: number;
  /**
   * Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
   */
  runs: number;
  /**
   * Date and time when this job started
   */
  start_date: string;
  status: GetCorporationsCorporationIdIndustryJobsStatus;
  /**
   * Number of successful runs for this job. Equal to runs unless this is an invention job
   */
  successful_runs?: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/industry/facilities/
 */
/**
 * 200 ok array
 *
 * @maxItems 10000
 */
type GetIndustryFacilitiesOk = GetIndustryFacilities_200Ok[];

/**
 * 200 ok object
 */
interface GetIndustryFacilities_200Ok {
  /**
   * ID of the facility
   */
  facility_id: number;
  /**
   * Owner of the facility
   */
  owner_id: number;
  /**
   * Region ID where the facility is
   */
  region_id: number;
  /**
   * Solar system ID where the facility is
   */
  solar_system_id: number;
  /**
   * Tax imposed by the facility
   */
  tax?: number;
  type_id: number;
  [k: string]: unknown | undefined;
}

/*!
 * ESI endpoint: get:/industry/systems/
 */
/**
 * activity string
 */
type GetIndustrySystemsActivity =
  | "copying"
  | "duplicating"
  | "invention"
  | "manufacturing"
  | "none"
  | "reaction"
  | "researching_material_efficiency"
  | "researching_technology"
  | "researching_time_efficiency"
  | "reverse_engineering";
/**
 * cost_indices array
 *
 * @maxItems 10
 */
type GetIndustrySystemsCostIndices = GetIndustrySystemsCostIndice[];
/**
 * 200 ok array
 *
 * @maxItems 10000
 */
type GetIndustrySystemsOk = GetIndustrySystems_200Ok[];

/**
 * 200 ok object
 */
interface GetIndustrySystems_200Ok {
  cost_indices: GetIndustrySystemsCostIndices;
  /**
   * solar_system_id integer
   */
  solar_system_id: number;
  [k: string]: unknown | undefined;
}
/**
 * cost_indice object
 */
interface GetIndustrySystemsCostIndice {
  activity: GetIndustrySystemsActivity;
  /**
   * cost_index number
   */
  cost_index: number;
  [k: string]: unknown | undefined;
}
